import React, { useEffect } from "react";

const signalingServerUrl = "ws://localhost:3000"; // WebSocket server URL
const signalingSocket = new WebSocket(signalingServerUrl);

signalingSocket.onopen = () => {
  console.log("Connected to signaling server");
};

signalingSocket.onmessage = (event) => {
  const message = JSON.parse(event.data);

  if (message.type === "offer") {
    handleOffer(message.offer, message.sender);
  } else if (message.type === "answer") {
    handleAnswer(message.answer);
  } else if (message.type === "icecandidate") {
    handleIceCandidate(message.candidate);
  }
};

function makeCall() {
  const configuration = {
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
  };
  const peerConnection = new RTCPeerConnection(configuration);

  peerConnection
    .createOffer()
    .then((offer) => {
      return peerConnection.setLocalDescription(offer);
    })
    .then(() => {
      signalingSocket.send(
        JSON.stringify({
          type: "offer",
          receiver: "receiver1",
          offer: peerConnection.localDescription,
        })
      );
      console.log("Offer set, signaling state:", peerConnection.signalingState);
    })
    .catch(console.error);

  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      signalingSocket.send(
        JSON.stringify({
          type: "icecandidate",
          candidate: event.candidate,
        })
      );
    }
  };
}

function handleOffer(offer, sender) {
  const configuration = {
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
    // iceServers: [{ urls: "stun:52.208.237.220:3478" }],
  };
  console.log("Offer received from", sender);
  const peerConnection = new RTCPeerConnection(configuration);

  peerConnection
    .setRemoteDescription(new RTCSessionDescription(offer))
    .then(() => peerConnection.createAnswer())
    .then((answer) => {
      return peerConnection.setLocalDescription(answer);
    })
    .then(() => {
      signalingSocket.send(
        JSON.stringify({
          type: "answer",
          answer: peerConnection.localDescription,
        })
      );
    })
    .catch(console.error);

  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      signalingSocket.send(
        JSON.stringify({
          type: "icecandidate",
          candidate: event.candidate,
        })
      );
    }
  };
}

function handleAnswer(answer) {
  peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
}

function handleIceCandidate(candidate) {
  peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
}

const MakeConnection: React.FC = () => {
  useEffect(() => {
    makeCall();
  }, []);

  return <div>Dummy Component</div>;
};

export default MakeConnection;
